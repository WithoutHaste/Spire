Model
=====

A single string of text comprising the entire document. Indexed by character from 0 to end.

Internal structure private, of course. Not actually a single string.

Style start and end points saved here.

	Save text in chunks.
	Styles can start only at the beginning of a chunk.
	Styles can end only at the end of a chunk.
	For multiple styles starting or ending at the same point, use empty chunks.
	
	Will need special chunks for formulas. Later.

Accept commands from Controller, Pass notice of changes to View.

	Initial load testing of model shows that either (A) I am awesome at data structures or (B) computers are so fast that it doesn't make much difference how I model the text.



View
====

Determine line breaks, page breaks, flowing text around graphics.

Note up to what character index this has been determined since last user edit.

	On each edit, restart update delay.
	Once delay runs out, begin propagating change forward.
	Will have to always keep current visible page up to date.
	
Draw graphics object for GUI display and for printing.
	
Accept notice of changes from Model, Trigger Controller display update.

	Given a list of characters.
	Given a list of display areas.
	Generate a list what character indexes line breaks and areas breaks occur at.
		Line break, area break, chapter break (start on next odd page)
	

	
Controller
==========

Interpret key and mouse commands, pass interpreted commands to Model.



Cindex
======

DocumentModel, View, and Chunk are already using several different types of indexes.

Going to try making a struct (closest I can get to a primitive) called Cindex that will be for Character Index Based On Full Length Of Document. The idea is to have an integer that is labeled by its type instead of in the variable name.